# Makefile for Xnmr Project
#
# UBC Physics

# can use -DNOHARDWARE to allow software simulated acqs (if /dev/PP_irq0 exists)
# For cygwin, add -DCYGWIN and change every libxnmr.so to libxnmr.dll

GTK_VERSION=gtk+-2.0

#CFLAGS = -g  -O2   -Wall  `pkg-config --cflags $(GTK_VERSION)`  -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGSEAL_ENABLE
#CFLAGS = -g  -O2   -Wall  `pkg-config --cflags  $(GTK_VERSION)`  -Wno-unused-result -DNOHARDWARE
CFLAGS = -g -O2 -Wall `pkg-config --cflags $(GTK_VERSION)` -Wno-unused-result  -Wno-format-truncation  -Wno-stringop-truncation -DDUELIME

#O3 causes serious problems with rtai!

all:  libxnmr.so Xnmr acq Xnmr_preproc bramps

clean:
	rm -f *.o acq Xnmr core libxnmr.a libxnmr.so Xnmr_preproc bramps

#libxnmr.a: pulse-duelime.o param_utils.o four1.o
#	ar -rc libxnmr.a pulse-duelime.o param_utils.o four1.o

libxnmr.so: pulse-duelime.o param_utils.o four1.o due-pp-lib.o
	$(CC) $(CFLAGS) -shared -o libxnmr.so pulse-duelime.o param_utils.o four1.o due-pp-lib.o

Xnmr_preproc: Xnmr_preproc-duelime.c
	$(CC) $(CFLAGS)  -o Xnmr_preproc Xnmr_preproc-duelime.c

bramps: bramps.c
	$(CC) $(CFLAGS) -o bramps bramps.c `pkg-config --libs gtk+-2.0`

#  added -L/usr/realtime/lib and -lpthread for rtai to link and -I/usr/realtime/include/ for compile
acq: acq-duelime.o pulse_hardware-duepp.o    lime-duepp.o libxnmr.so due_bgu_interface.o
#	$(CC) -L. -o acq acq-duelime.o pulse_hardware-duepp.o  lime-duepp.o -lm -lpthread  -lxnmr  -ldl -lfftw3f -lLimeSuite -lusb
#strip usb stuff out of spinapi:
	$(CC) -L. -o acq acq-duelime.o pulse_hardware-duepp.o  lime-duepp.o due_bgu_interface.o -lm -lpthread  -lxnmr   -lfftw3f -lLimeSuite 
	@echo ""
	@echo "Don't forget to make acq suid!!!"
	@echo ""

Xnmr: xnmr.o buff.o panel.o process_f.o param_f.o xnmr_ipc.o   libxnmr.so
	$(CC) $(CFLAGS)  -L. xnmr.o   buff.o  panel.o process_f.o param_f.o\
 xnmr_ipc.o  -o Xnmr \
`pkg-config --libs $(GTK_VERSION)`  -lm -lport -lgfortran  -lxnmr -lfftw3f -lfftw3 `pkg-config --libs lapack`

# This used to be necessary: -Xlinker -defsym -Xlinker MAIN__=main 
# the -Xlinker -defsym -Xlinker MAIN__=main   passes: '-defsym MAIN__=main' to the linker, let us use 
# fortran and C together.  The -lportP has the nonlinear fitting routine, and lf2c is necessary for fortran
#now -lgfortran seems to do the job.

acq-duelime.o: acq-duelime.c acq-duelime.h shm_data.h shm_prog-duelime.h h_config-duelime.h p_signals.h pulse_hardware-duepp.h param_utils.h  lime-duepp.h duepp.h due-pp-lib.h due_bgu_interface.h 
	$(CC) $(CFLAGS) -c acq-duelime.c

lime-duepp.o: lime-duepp.c shm_prog-duelime.h h_config-duelime.h param_utils.h duepp.h due-pp-lib.h lime-duepp.h
	$(CC) $(CFLAGS) -c lime-duepp.c


pulse_hardware-duepp.o: pulse_hardware-duepp.c pulse_hardware-duepp.h shm_prog-duelime.h h_config-duelime.h param_utils.h p_signals.h duepp.h due-pp-lib.h pulse-duelime.h
	$(CC) -O1 $(CFLAGS) -c pulse_hardware-duepp.c
xnmr.o: xnmr.c xnmr.h panel.h buff.h param_f.h xnmr_ipc.h p_signals.h
	$(CC) $(CFLAGS) -c xnmr.c
buff.o: buff.c xnmr.h buff.h param_f.h panel.h param_utils.h xnmr_ipc.h p_signals.h
	$(CC) $(CFLAGS) -c buff.c
four1.o: four1.c
	$(CC) $(CFLAGS) -fpic -c four1.c
spline.o: spline.c
	$(CC) $(CFLAGS) -c spline.c
splint.o: splint.c
	$(CC) $(CFLAGS) -c splint.c
nrutil.o: nrutil.c
	$(CC) $(CFLAGS) -c nrutil.c
panel.o: panel.c panel.h process_f.h param_f.h xnmr_ipc.h shm_data.h buff.h p_signals.h xnmr.h
	$(CC) $(CFLAGS) -c panel.c
process_f.o: process_f.c process_f.h panel.h xnmr.h buff.h param_utils.h 
	$(CC) $(CFLAGS) -c process_f.c
param_f.o: param_f.c param_f.h xnmr_ipc.h shm_data.h panel.h xnmr_ipc.h param_utils.h
	$(CC) $(CFLAGS) -c param_f.c
xnmr_ipc.o: xnmr_ipc.c xnmr_ipc.h shm_data.h p_signals.h process_f.h panel.h buff.h xnmr.h h_config-duelime.h param_f.h
	$(CC) $(CFLAGS) -c xnmr_ipc.c
pulse-duelime.o: pulse-duelime.c pulse-duelime.h h_config-duelime.h shm_data.h shm_prog-duelime.h p_signals.h param_utils.h duepp.h due-pp-lib.h lime-duepp.h
	$(CC) -fpic $(CFLAGS) -c pulse-duelime.c
param_utils.o: param_utils.h param_utils.c shm_data.h
	$(CC) -fpic $(CFLAGS) -c param_utils.c
due-pp-lib.o: due-pp-lib.h due-pp-lib.c
	$(CC) -fpic $(CFLAGS) -c due-pp-lib.c
due_bgu_interface.o: due_bgu_interface.c param_utils.h due-pp-lib.h shm_prog-duelime.h duepp.h
	$(CC) -fpic $(CFLAGS) -c due_bgu_interface.c


ipcclean: ipcclean.c shm_data.h shm_prog-duelime.h
	$(CC) $(CFLAGS) -o ipcclean ipcclean.c
install: 


###### excess junk
spin_bug: spin_bug.c
	cc -o spin_bug -g -Wall `pkg-config --cflags gtk+-2.0` spin_bug.c `pkg-config --libs gtk+-2.0`

chooser_bug.o: chooser_bug.c
	cc -c chooser_bug.c $(CFLAGS)

chooser_bug: chooser_bug.o
	cc -o chooser_bug chooser_bug.o `pkg-config --libs gthread-2.0 gtk+-2.0`

